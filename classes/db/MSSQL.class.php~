<?php

/**
 * Database Manager class for external connections to Microsoft SQL Servers
 * 
 * Supported PHP extensions:
 *      sql_srv
 *      pdo_sqlsrv
 *      odbc
 *      pdo_odbc
 * 
 * @copyright 2012 Bedford College
 * @package Bedford College Electronic Learning Blue Print (ELBP)
 * @version 1.0
 * @author Conn Warwicker <cwarwicker@bedford.ac.uk> <conn@cmrwarwicker.com>
 * 
 */
namespace ELBP\MIS;
/**
 * 
 */
class MSSQL extends Manager {
    
    protected static $acceptedTypes = array(
        'pdo_sqlsrv',
        'pdo_odbc',
        'sqlsrv',
        'odbc'
    ); 
    
    private $extension = false;
    
    /**
     * Construct object
     * @param mixed $params If null we're building dynamically with parameters. If array/object
     * @return boolean
     * @throws \ELBP\ELBPException
     */
    public function __construct($params = null) {
        
        // First try php_pdo_oci
        if (extension_loaded('pdo_sqlsrv')) $this->extension = 'pdo_sqlsrv';
        else if (extension_loaded ('sqlsrv')) $this->extension = 'sqlsrv';
        else if (extension_loaded('pdo_odbc')) $this->extension = 'pdo_odbc';
        else if (extension_loaded('odbc')) $this->extension = 'odbc';
                                
        if (!$this->extension){
            throw new \ELBP\ELBPException( get_string('mismanager', 'block_elbp'), get_string('noextension', 'block_elbp'), 'pdo_sqlsrv / sqlsrv', get_string('installextension', 'block_elbp') );
            return false;
        }
        
        if (is_array($params) || is_object($params)) $this->conn = $params;
                                        
    }
    
    public function wrapValue($value) {
        return "[{$value}]";
    }
    
     /**
     * Connect to a database
     * @param mixed $params If null we're using the connection record in the db as specified in constructor. Else we're giving details
     */
    public function connect($params = null){        
        
        $func = 'connect_'.$this->extension;
                
        // use connection record
        if (is_null($params)){
            return $this->$func($this->conn->host, $this->conn->un, $this->conn->pw, $this->conn->db);
        }
        else
        {
            return $this->$func($params['host'], $params['user'], $params['pass'], $params['db']);
        }
        
    }
    
    /**
     * Connect to MS SQL Server, using standard sqlsrv_* functions
     * @param type $host
     * @param type $user
     * @param type $pass
     * @param type $db
     * @return type
     * @throws \ELBP\ELBPException
     */
    private function connect_sqlsrv($host, $user, $pass, $db)
    {
        try {
            $info = array();
            $info['UID'] = $user;
            $info['PWD'] = $pass;
            if (!empty($db)) $info['Database'] = $db;
            $conn = sqlsrv_connect($host, $info);
            if (!$conn){
                if (!$this->show_conn_err) return false;
                throw new \ELBP\ELBPException( get_string('mismanager', 'block_elbp'), get_string('cantconnect', 'block_elbp') . ': <pre style="text-align:left;">' . print_r(sqlsrv_errors(), true) .'</pre>' );
            }
            $this->dbh = $conn;
            return $this->dbh;
        } catch (\ELBP\ELBPException $e){
            if (!$this->show_conn_err){
                $this->last_error = $e->getMessage();
                return false;
            }
            echo $e->getException();
            return false;
        }
    }
    
    /**
     * Connect to MS SQL Server using PDO for sqlsrv
     * @param type $host
     * @param type $user
     * @param type $pass
     * @param type $db
     * @return type
     */
    private function connect_pdo_sqlsrv($host, $user, $pass, $db)
    {
        try {
            $DBH = new \PDO("sqlsrv:Server={$host};Database={$db}", $user, $pass);
            $DBH->setAttribute( \PDO::ATTR_DEFAULT_FETCH_MODE, \PDO::FETCH_ASSOC );
            $DBH->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
            $this->dbh = $DBH;
            return $this->dbh;
        } catch (\Exception $e){
            if (!$this->show_conn_err){
                $this->last_error = $e->getMessage();
                return false;
            }
            echo $e->getMessage();
            return false;
        }
        
    }
    
    /**
     * Connect to MS SQL server using PDO for ODBC
     * @param type $host
     * @param type $user
     * @param type $pass
     * @param type $db
     */
    private function connect_pdo_odbc($host, $user, $pass, $db)
    {
         try {
            $DBH = new \PDO("odbc:{$host}", $user, $pass);
            $DBH->setAttribute( \PDO::ATTR_DEFAULT_FETCH_MODE, \PDO::FETCH_ASSOC );
            $DBH->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
            $this->dbh = $DBH;
            return $this->dbh;
        } catch (\Exception $e){
            if (!$this->show_conn_err){
                $this->last_error = $e->getMessage();
                return false;
            }
            echo $e->getMessage();
            return false;
        }
    }
    
    
    /**
     * Connect to MS SQL server using PDO for ODBC
     * @param type $host
     * @param type $user
     * @param type $pass
     * @param type $db
     */
    private function connect_odbc($host, $user, $pass, $db)
    {
         try {
            $conn = odbc_connect($host, $user, $pass);
            if (!$conn){
                if (!$this->show_conn_err) return false;
                throw new \ELBP\ELBPException( get_string('mismanager', 'block_elbp'), get_string('cantconnect', 'block_elbp') . ': <pre style="text-align:left;">' . print_r(sqlsrv_errors(), true) .'</pre>' );
            }
            $this->dbh = $conn;
            return $this->dbh;
        } catch (\ELBP\ELBPException $e){
            if (!$this->show_conn_err){
                $this->last_error = $e->getMessage();
                return false;
            }
            echo $e->getException();
            return false;
        }
    }
    
    
    
    
    
    
    /**
     * Disconnect 
     */
    public function disconnect(){
        $func = 'disconnect_'.$this->extension;
        return $this->$func();
    }
    
    /**
     * Disconnect using sqlsrv_*
     */
    private function disconnect_sqlsrv()
    {
        sqlsrv_close($this->dbh);
    }
    
    /**
     * Disconnect using odbc_*
     */
    private function disconnect_odbc()
    {
        odbc_close($this->dbh);
    }
    
    private function disconnect_pdo()
    {
        $this->dbh = null;
    }
    
    /**
     * Disconnect using sqlsrv PDO
     */
    private function disconnect_pdo_sqlsrv()
    {
        $this->disconnect_pdo();
    }
    
    /**
     * Disconnect using odbc PDO
     */
    private function disconnect_pdo_odbc()
    {
        $this->disconnect_pdo();
    }

    
    
    
    
    
    /**
     * Run an SQL query and return a statement - to be used for things like selecting
     * @param type $sql
     * @param type $params
     * @return type
     */
    public function query($sql, $params){
        
        $this->lastSQL = $sql;
        $func = 'query_'.$this->extension;
        return $this->$func($sql, $params);
        
    }
    
    /**
     * Run SQL query using PDO
     * @param type $sql
     * @param type $params
     * @return $st Statement
     */
    private function query_pdo($sql, $params)
    {
        try {
            $st = $this->dbh->prepare($sql);        
            $st->execute($params);
            return $st;
        } catch (\PDOException $e){
            echo $e->getMessage();
        }
    }
    
    /**
     * SQL SRV PDO
     * @param type $sql
     * @param type $params
     * @return type
     */
    private function query_pdo_sqlsrv($sql, $params){
        return $this->query_pdo($sql, $params);
    }
    
    /**
     * ODBC PDO
     * @param type $sql
     * @param type $params
     * @return type
     */
    private function query_pdo_odbc($sql, $params){
        return $this->query_pdo($sql, $params);
    }
    
    
    
    /**
     * Run an SQL query using standard sqlsrv_*
     * @param type $sql
     * @param type $params
     * @return $st Statement
     */
    private function query_sqlsrv($sql, $params){
        $st = sqlsrv_query($this->dbh, $sql, $params);
        return $st;
    }
    
    /**
     * Run an SQL query using standard odbc_*
     * @param type $sql
     * @param type $params
     * @return $st Statement
     */
    private function query_odbc($sql, $params){
        $st = odbc_prepare($this->dbh, $sql);
        odbc_execute($st, $params);
        return $st;
    }
    
    
    
    
    
    
    
    
    
    /**
     * Execute an SQL query and return the number of affect rows - to be used for things like updating & inserting
     * @param type $sql
     * @param type $params
     * @return type
     */
    public function execute($sql, $params){
        $this->lastSQL = $sql;
        $func = 'execute_'.$this->extension;
        return $this->$func($sql, $params);
    }
    
    private function execute_pdo($sql, $params)
    {
        $st = $this->query($sql, $params);
        return $st->rowCount();
    }
    
    /**
     * Execute an SQL query using sqlsrv PDO
     * @param type $sql
     * @return type
     */
    private function execute_pdo_sqlsrv($sql, $params)
    {
        return $this->execute_pdo($sql, $params);
    }
    
    /**
     * Execute an SQL query using odbc PDO
     * @param type $sql
     * @return type
     */
    private function execute_pdo_odbc($sql, $params)
    {
        return $this->execute_pdo($sql, $params);
    }
    
    /**
     * Execute an SQL query using standard sqlsrv_*
     * @param type $sql
     * @param type $params
     * @return type
     */
    private function execute_sqlsrv($sql, $params)
    {
         $st = $this->query($sql, $params);
         return sqlsrv_rows_affected($st);
    }
    
    /**
     * Execute an SQL query using standard odbc_*
     * @param type $sql
     * @param type $params
     * @return type
     */
    private function execute_odbc($sql, $params)
    {
         $st = $this->query($sql, $params);
         return odbc_num_rows($st);
    }
    
    
    
    
    
    
    
    /**
     * Select from a DB
     * @param type $table
     * @param type $where
     * @param type $fields
     * @param type $limit
     */
    public function select($table, $where = null, $fields = "*", $limit = null){
                
        $sql = "";
        $sql .= " SELECT ";
            if (!is_null($limit)) $sql .= " TOP {$limit} ";
        $sql .= " {$fields} ";
        
        $sql .= " FROM [{$table}] ";
        
        if (is_array($where)){
            $sql .= " WHERE ";
            foreach($where as $name => $value){
                $sql .= " [{$name}] = ? AND ";
                $params[] = $value;
            }
        }
        
        $sql = substr_replace($sql, "", strrpos($sql, " AND"), strlen($sql));
                
        $query = $this->query($sql, $params);
                
        if (!$query) return array();
        
        return $this->getRecordSet($query);
        
    }
    
    /**
     * Given the result of a query, put the rows it found into a recordset
     * @param type $query
     * @return type
     */
    protected function getRecordSet($query)
    {
        $func = 'getRecordSet_'.$this->extension;
        return $this->$func($query);
    }
    
    /**
     * Get recordset for standard sqlsrv_*
     * @param type $query
     * @return type
     */
    private function getRecordSet_sqlsrv($query)
    {
        $results = array();
        while($row = sqlsrv_fetch_object($query))
        {
            $results[] = $row;
        }
                
        // If only one, return that one object rather than an array with one element
        if (count($results) == 1) return $results[0];
        
        return $results;
    }
    
    /**
     * Get recordset for standard odbc_*
     * @param type $query
     * @return type
     */
    private function getRecordSet_odbc($query)
    {
        $results = array();
        while($row = odbc_fetch_object($query))
        {
            $results[] = $row;
        }
                
        // If only one, return that one object rather than an array with one element
        if (count($results) == 1) return $results[0];
        
        return $results;
    }
    
    private function getRecordSet_pdo($query)
    {
        $results = array();
        while($row = $query->fetch())
        {
            $results[] = $row;
        }
        
        // If only one, return that one object rather than an array with one element
        if (count($results) == 1) return $results[0];
        
        return $results;
    }
    
    /**
     * Get recordset for sqlsrv PDO
     * @param type $query
     * @return type
     */
    private function getRecordSet_pdo_sqlsrv($query)
    {
        return $this->getRecordSet_pdo($query);
    }
    
    /**
     * Get recordset for odbc PDO
     * @param type $query
     * @return type
     */
    private function getRecordSet_pdo_odbc($query)
    {
        return $this->getRecordSet_pdo($query);
    }
    
    
    
    
    

    /**
     * Update a table in the DB
     * @param type $table
     * @param type $data
     * @param type $where
     * @param type $limit
     * @return boolean
     */
    public function update($table, $data, $where, $limit = null){
        if (!is_object($data) && !is_array($data)) return false;        
        $data = (array) $data;
        if (!$data) return false;
        
        $params = array();
        $sql = "";
        $sql .= "UPDATE  ";
        if (!is_null($limit)) $sql .= "TOP ({$limit}) ";
        $sql .= " [{$table}] ";
        $sql .= "SET ";
        
        foreach($data as $field => $value)
        {
            $sql .= " [{$field}] = ? ,";
            $params[] = $value;
        }
        
        // Strip comma
        $sql = substr($sql, 0, strlen($sql)-1);
        
        $sql .= " WHERE ";
        
        foreach($where as $field => $value)
        {
            $sql .= " [{$field}] = ? AND";
            $params[] = $value;
        }
        
        // Strip AND
        $sql = substr($sql, 0, strlen($sql)-3);
        
        return $this->execute($sql, $params);
        
    }
 
    /**
     * Delete records from a DB table
     * @param string $table
     * @param array $where
     * @param int $limit
     * @return boolean
     */
    public function delete($table, $where, $limit = 1){
        
        if (!is_object($where) && !is_array($where)) return false;        
        $where = (array) $where;
        if (!$where) return false;
        
        $params = array();
        $sql = "";
        
        $sql .= "DELETE  ";
        if (!is_null($limit)) $sql .= "TOP ({$limit}) ";
        
        $sql .= " FROM [{$table}] ";        
        
        $sql .= " WHERE ";
        
        foreach($where as $field => $value)
        {
            $sql .= " [{$field}] = ? AND";
            $params[] = $value;
        }
        
        // Strip AND
        $sql = substr($sql, 0, strlen($sql)-3);
        
        return $this->execute($sql, $params);
        
    }
    
    /**
     * Insert records into a DB table
     * @param type $table
     * @param type $data
     * @return boolean
     */
    public function insert($table, $data){
        
        if (!is_object($data) && !is_array($data)) return false;        
        $data = (array) $data;
        if (!$data) return false;
        
        $params = array();
        $sql = "";
        
        $sql .= "INSERT INTO [{$table}] ";
        $sql .= "( ";
            foreach($data as $field => $value)
            {
                $sql .= "[{$field}],";
            }
        $sql = substr($sql, 0, strlen($sql)-1);
        $sql .= ") ";
        $sql .= "VALUES (";
            foreach($data as $field => $value)
            {
                $sql .= "?,";
            }
        $sql = substr($sql, 0, strlen($sql)-1);
        $sql .= ")";
        
        foreach($data as $value)
        {
            $params[] = $value;
        }
        
        return $this->execute($sql, $params);
        
    }

    /**
     * Given a query result, fetch the next row of records
     * @param type $qry
     * @return type
     */
    public function fetch($qry){
        $func = 'fetch_'.$this->extension;
        return $this->$func($qry);
    }
    
    /**
     * Fetch row for pdo sqlsrv
     * @param type $qry
     * @return type
     */
    private function fetch_pdo($qry)
    {
        return $qry->fetch();
    }
    
     /**
     * Fetch row for pdo sqlsrv
     * @param type $qry
     * @return type
     */
    private function fetch_pdo_sqlsrv($qry)
    {
        return $this->fetch_pdo($qry);
    }
    
     /**
     * Fetch row for pdo sqlsrv
     * @param type $qry
     * @return type
     */
    private function fetch_pdo_odbc($qry)
    {
        return $this->fetch_pdo($qry);
    }
    
    /**
     * Fetch row for sqlsrv_*
     * @param type $qry
     * @return type
     */
    private function fetch_sqlsrv($qry)
    {
        return sqlsrv_fetch_object($qry);
    }
    
    /**
     * Fetch row for odbc_*
     * @param type $qry
     * @return type
     */
    private function fetch_odbc($qry)
    {
        return odbc_fetch_object($qry);
    }
    
    public function convertDateSQL($field, $format) {
        ;
    }
    
}

